@using Gauss.TccUnifaat.MVC.ViewModels
@model RegisterViewModel

@{
    var pageName = "";
    
    bool alterando = Context.Request.RouteValues.ContainsKey("id");
    if (alterando)
        pageName = "Alteração de Usuário";
    else
        pageName = "Cadastro de Usuário";

    ViewData["Title"] = pageName;
    ViewData["Category1"] = "Usuários";
    ViewData["Heading"] = pageName;
    ViewData["Heading"] = $"Usuários: <span class='fw-300'>{pageName}</span>";
}

<div class="container-fluid mt-3">

    <div class="card mb-4">
        <div class="card-header">
            <h5>@pageName</h5>
        </div>
        <div class="card-body">
            <form asp-action="Register" method="post">
                <div asp-validation-summary="All" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="NomeCompleto"></label>
                    <input asp-for="NomeCompleto" class="form-control" />
                    <span asp-validation-for="NomeCompleto" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Email"></label>
                    <input asp-for="Email" class="form-control" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
                @if (!alterando)
                {
                    <div class="form-group">
                        <label asp-for="Password"></label>
                        <input asp-for="Password" class="form-control" />
                        <span asp-validation-for="Password" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="ConfirmPassword"></label>
                        <input asp-for="ConfirmPassword" class="form-control" />
                        <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                    </div>
                }
                <div class="form-group">
                    <label asp-for="Cpf"></label>
                    <input asp-for="Cpf" class="form-control" id="cpf" oninput="formatarCPF(this)" />
                </div>

                <div class="form-group">
                    <label asp-for="Telefone"></label>
                    <input asp-for="Telefone" class="form-control" oninput="formatarTelefone(this)" />
                    <span asp-validation-for="Telefone" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="DataNascimento"></label>
                    <input asp-for="DataNascimento" class="form-control" />
                    <span asp-validation-for="DataNascimento" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="SelectedRole"></label>
                    <select asp-for="SelectedRole" class="form-control">
                        <option value="" selected>Selecione uma opção</option>
                        <option value="Aluno">Aluno</option>
                        <option value="Professor">Professor</option>
                        <option value="Administrador">Administrador</option>
                    </select>
                    <span asp-validation-for="SelectedRole" class="text-danger"></span>
                </div>

                <div class="form-group mt-3">
                    <input type="submit" value="Salvar" class="btn btn-secondary" />
                    <a class="btn btn-outline-secondary" asp-action="Index">Voltar para lista</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        function formatarCPF(campo) {
            let value = campo.value.replace(/\D/g, '');
            value = value.slice(0, 11);

            let formattedValue = value.replace(/(\d{3})(\d)/, "$1.$2")
                .replace(/(\d{3})(\d)/, "$1.$2")
                .replace(/(\d{3})(\d{1,2})$/, "$1-$2");

            campo.value = formattedValue;
        }

        function formatarTelefone(campo) {
            let value = campo.value.replace(/\D/g, '');
            value = value.slice(0, 11);

            let formattedValue;

            if (value.length <= 10) {
                formattedValue = value.replace(/(\d{2})(\d)/, "($1) $2")
                    .replace(/(\d{4})(\d)/, "$1-$2")
                    .replace(/(\d{4})-(\d)(\d{4})/, "$1$2-$3");
            } else {
                formattedValue = value.replace(/(\d{2})(\d)/, "($1) $2")
                    .replace(/(\d{5})(\d)/, "$1-$2")
                    .replace(/(\d{4})-(\d)(\d{4})/, "$1$2-$3");
            }

            campo.value = formattedValue;
        }
    </script>
}

